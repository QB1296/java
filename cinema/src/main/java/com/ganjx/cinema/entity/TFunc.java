package com.ganjx.cinema.entity;

// Generated 2015-3-4 9:42:26 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.annotate.JsonBackReference;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import com.vion.core.domain.entity.IEntity;

/**
 * TFunc generated by hbm2java
 */
@Entity
@Table(name = "t_func")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class TFunc implements IEntity,Comparable<TFunc>{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private Long lfuncRootid;
	private Long lfuncParentid;
	private String sfuncName;
	private String sfuncUrl;
	private String siconUrl;
	private String sfuncDesc;
	private Byte lfuncType;
	private Date ddate;
	private Byte lisleaf;
	private Byte lstatus;
	private Integer lorder;
	private String spageId;
	private String skey;

	private TFunc parent;
	private List<TFunc> children;
	
	public TFunc() {
	}

	public TFunc(Long id) {
		this.id = id;
	}

	public TFunc(Long id, Long lfuncRootid, Long lfuncParentid,
			String sfuncName, String sfuncUrl, String siconUrl,
			String sfuncDesc, Byte lfuncType, Date ddate, Byte lisleaf,
			Byte lstatus, Integer lorder, String spageId, String skey) {
		this.id = id;
		this.lfuncRootid = lfuncRootid;
		this.lfuncParentid = lfuncParentid;
		this.sfuncName = sfuncName;
		this.sfuncUrl = sfuncUrl;
		this.siconUrl = siconUrl;
		this.sfuncDesc = sfuncDesc;
		this.lfuncType = lfuncType;
		this.ddate = ddate;
		this.lisleaf = lisleaf;
		this.lstatus = lstatus;
		this.lorder = lorder;
		this.spageId = spageId;
		this.skey = skey;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "lfunc_rootid", scale = 0)
	public Long getLfuncRootid() {
		return this.lfuncRootid;
	}

	public void setLfuncRootid(Long lfuncRootid) {
		this.lfuncRootid = lfuncRootid;
	}

	@Column(name = "lfunc_parentid", scale = 0)
	public Long getLfuncParentid() {
		return this.lfuncParentid;
	}

	public void setLfuncParentid(Long lfuncParentid) {
		this.lfuncParentid = lfuncParentid;
	}

	@Column(name = "sfunc_name", length = 30)
	public String getSfuncName() {
		return this.sfuncName;
	}

	public void setSfuncName(String sfuncName) {
		this.sfuncName = sfuncName;
	}

	@Column(name = "sfunc_url")
	public String getSfuncUrl() {
		return this.sfuncUrl;
	}

	public void setSfuncUrl(String sfuncUrl) {
		this.sfuncUrl = sfuncUrl;
	}

	@Column(name = "sicon_url")
	public String getSiconUrl() {
		return this.siconUrl;
	}

	public void setSiconUrl(String siconUrl) {
		this.siconUrl = siconUrl;
	}

	@Column(name = "sfunc_desc")
	public String getSfuncDesc() {
		return this.sfuncDesc;
	}

	public void setSfuncDesc(String sfuncDesc) {
		this.sfuncDesc = sfuncDesc;
	}

	@Column(name = "lfunc_type", precision = 2, scale = 0)
	public Byte getLfuncType() {
		return this.lfuncType;
	}

	public void setLfuncType(Byte lfuncType) {
		this.lfuncType = lfuncType;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ddate", length = 29)
	public Date getDdate() {
		return this.ddate;
	}

	public void setDdate(Date ddate) {
		this.ddate = ddate;
	}

	@Column(name = "lisleaf", precision = 2, scale = 0)
	public Byte getLisleaf() {
		return this.lisleaf;
	}

	public void setLisleaf(Byte lisleaf) {
		this.lisleaf = lisleaf;
	}

	@Column(name = "lstatus", precision = 2, scale = 0)
	public Byte getLstatus() {
		return this.lstatus;
	}

	public void setLstatus(Byte lstatus) {
		this.lstatus = lstatus;
	}

	@Column(name = "lorder", precision = 9, scale = 0)
	public Integer getLorder() {
		return this.lorder;
	}

	public void setLorder(Integer lorder) {
		this.lorder = lorder;
	}

	@Column(name = "spage_id", length = 60)
	public String getSpageId() {
		return this.spageId;
	}

	public void setSpageId(String spageId) {
		this.spageId = spageId;
	}

	@Column(name = "skey", length = 60)
	public String getSkey() {
		return this.skey;
	}

	public void setSkey(String skey) {
		this.skey = skey;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="lfunc_parentid",insertable=false,updatable=false)
	@JsonBackReference
	public TFunc getParent() {
		return parent;
	}

	public void setParent(TFunc parent) {
		this.parent = parent;
	}
	
	@OneToMany(fetch=FetchType.LAZY)
	@JoinColumn(name="lfunc_parentid",referencedColumnName="id",insertable=false,updatable=false)
	public List<TFunc> getChildren() {
		return children;
	}

	public void setChildren(List<TFunc> children) {
		this.children = children;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((ddate == null) ? 0 : ddate.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result
				+ ((lfuncParentid == null) ? 0 : lfuncParentid.hashCode());
		result = prime * result
				+ ((lfuncRootid == null) ? 0 : lfuncRootid.hashCode());
		result = prime * result
				+ ((lfuncType == null) ? 0 : lfuncType.hashCode());
		result = prime * result + ((lisleaf == null) ? 0 : lisleaf.hashCode());
		result = prime * result + ((lorder == null) ? 0 : lorder.hashCode());
		result = prime * result + ((lstatus == null) ? 0 : lstatus.hashCode());
		result = prime * result
				+ ((sfuncDesc == null) ? 0 : sfuncDesc.hashCode());
		result = prime * result
				+ ((sfuncName == null) ? 0 : sfuncName.hashCode());
		result = prime * result
				+ ((sfuncUrl == null) ? 0 : sfuncUrl.hashCode());
		result = prime * result
				+ ((siconUrl == null) ? 0 : siconUrl.hashCode());
		result = prime * result + ((skey == null) ? 0 : skey.hashCode());
		result = prime * result + ((spageId == null) ? 0 : spageId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TFunc other = (TFunc) obj;
		if (ddate == null) {
			if (other.ddate != null)
				return false;
		} else if (!ddate.equals(other.ddate))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (lfuncParentid == null) {
			if (other.lfuncParentid != null)
				return false;
		} else if (!lfuncParentid.equals(other.lfuncParentid))
			return false;
		if (lfuncRootid == null) {
			if (other.lfuncRootid != null)
				return false;
		} else if (!lfuncRootid.equals(other.lfuncRootid))
			return false;
		if (lfuncType == null) {
			if (other.lfuncType != null)
				return false;
		} else if (!lfuncType.equals(other.lfuncType))
			return false;
		if (lisleaf == null) {
			if (other.lisleaf != null)
				return false;
		} else if (!lisleaf.equals(other.lisleaf))
			return false;
		if (lorder == null) {
			if (other.lorder != null)
				return false;
		} else if (!lorder.equals(other.lorder))
			return false;
		if (lstatus == null) {
			if (other.lstatus != null)
				return false;
		} else if (!lstatus.equals(other.lstatus))
			return false;
		if (sfuncDesc == null) {
			if (other.sfuncDesc != null)
				return false;
		} else if (!sfuncDesc.equals(other.sfuncDesc))
			return false;
		if (sfuncName == null) {
			if (other.sfuncName != null)
				return false;
		} else if (!sfuncName.equals(other.sfuncName))
			return false;
		if (sfuncUrl == null) {
			if (other.sfuncUrl != null)
				return false;
		} else if (!sfuncUrl.equals(other.sfuncUrl))
			return false;
		if (siconUrl == null) {
			if (other.siconUrl != null)
				return false;
		} else if (!siconUrl.equals(other.siconUrl))
			return false;
		if (skey == null) {
			if (other.skey != null)
				return false;
		} else if (!skey.equals(other.skey))
			return false;
		if (spageId == null) {
			if (other.spageId != null)
				return false;
		} else if (!spageId.equals(other.spageId))
			return false;
		return true;
	}

	@Override
	public int compareTo(TFunc o) {
		// TODO Auto-generated method stub
		if(this.getLorder() == null || o.getLorder() == null)
			return 0;
		return this.getLorder().compareTo(o.getLorder());
	}

	

}
